#!/usr/bin/env ruby

input = ARGV.join(' ')

Struct.new("Release", :code_name, :version, :api_level) do
  BASE_COLOR_CODE = '37'
  NAME_COLOR_CODE = '35'
  VERSION_COLOR_CODE = '91'
  API_COLOR_CODE = '36'
  def to_s
    "\e[#{BASE_COLOR_CODE}mName: \e[#{NAME_COLOR_CODE}m#{code_name}\e[#{BASE_COLOR_CODE}m, " +
      "Version: \e[#{VERSION_COLOR_CODE}m#{version}\e[#{BASE_COLOR_CODE}m, " +
      "Api Level: \e[#{API_COLOR_CODE}m#{api_level}\e[#{BASE_COLOR_CODE}m"
  end
end

releases = [
  Struct::Release.new("Oreo",                "8.1.0",         '27'),
  Struct::Release.new("Oreo",                "8.0.0",         '26'),
  Struct::Release.new("Nougat",              "7.1",           '25'),
  Struct::Release.new("Nougat",              "7.0",           '24'),
  Struct::Release.new("Marshmallow",         "6.0",           '23'),
  Struct::Release.new("Lollipop",            "5.1",           '22'),
  Struct::Release.new("Lollipop",            "5.0",           '21'),
  Struct::Release.new("KitKat",              "4.4 - 4.4.4",   '19'),
  Struct::Release.new("Jelly Bean",          "4.3.x",         '18'),
  Struct::Release.new("Jelly Bean",          "4.2.x",         '17'),
  Struct::Release.new("Jelly Bean",          "4.1.x",         '16'),
  Struct::Release.new("Ice Cream Sandwich",  "4.0.3 - 4.0.4", '15'),
  Struct::Release.new("Ice Cream Sandwich",  "4.0.1 - 4.0.2", '14'),
  Struct::Release.new("Honeycomb",           "3.2.x",         '13'),
  Struct::Release.new("Honeycomb",           "3.1",           '12'),
  Struct::Release.new("Honeycomb",           "3.0",           '11'),
  Struct::Release.new("Gingerbread",         "2.3.3 - 2.3.7", '10'),
  Struct::Release.new("Gingerbread",         "2.3 - 2.3.2",    '9'),
  Struct::Release.new("Froyo",               "2.2.x",          '8'),
  Struct::Release.new("Eclair",              "2.1",            '7'),
  Struct::Release.new("Eclair",              "2.0.1",          '6'),
  Struct::Release.new("Eclair",              "2.0",            '5'),
  Struct::Release.new("Donut",               "1.6",            '4'),
  Struct::Release.new("Cupcake",             "1.5",            '3'),
  Struct::Release.new("(no code name)",      "1.1",            '2'),
  Struct::Release.new("(no code name)",      "1.0",            '1')
]

if input == 'all'
  puts releases
  exit
end

# TODO: return a match ranking from here for sorting later
def matches_release(input, release)
  matches_code_name(input, release.code_name) || matches_version(input, release.version) || matches_api_level(input, release.api_level)
end

def matches_code_name(input, code_name)
  levenshtein_distance(input, code_name) < 5
end

def matches_version(input, version)
  version_major, version_minor = version.split('.')
  input_major, input_minor = input.split('.')
  version_major == input_major && (input_minor.nil? || input_minor == input_minor)
end

def matches_api_level(input, api_level)
  input == api_level
end

def levenshtein_distance(s, t)
  n = s.length
  m = t.length

  if n == 0
    return n
  end

  if m == 0
    return m
  end

  matrix = []

  matrix << (0..m).to_a

  (1..n).each do |j|
    matrix << [j, *m.times.collect { nil }]
  end

  (1..n).each do |i|
    (1..m).each do |j|
      cost = s[i-1] == t[j-1] ? 0 : 1
      a = matrix[i-1][j] + 1
      b = matrix[i][j-1] + 1
      c = matrix[i-1][j-1] + cost
      matrix[i][j] = [a,b,c].min
    end
  end

  # print_matrix matrix

  matrix[n][m]
end

def print_matrix(matrix)
  cols = matrix.length
  rows = matrix.first.length

  str = ""

  (0...rows).each do |row|
    (0...cols).each do |col|
      str << "#{matrix[col][row]}, "
    end
    str << "\n"
  end
  puts str
end

possibles = []

releases.each do |release|
  possibles << release if matches_release(input, release)
end

if possibles.any?
  puts possibles.reverse
else
  puts "No matches for #{input} :("
end
